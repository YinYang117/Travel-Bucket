'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var React = require('react');
var useIsomorphicLayoutEffect = require('@reach/utils/use-isomorphic-layout-effect');
var useForceUpdate = require('@reach/utils/use-force-update');
var reactDom = require('react-dom');
require('tiny-warning');

function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;

  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }

  return target;
}

var _excluded = ["unstable_skipInitialRender"];
/**
 * Portal
 *
 * @see Docs https://reach.tech/portal#portal
 */

var PortalImpl = function PortalImpl(_ref) {
  var children = _ref.children,
      _ref$type = _ref.type,
      type = _ref$type === void 0 ? "reach-portal" : _ref$type,
      containerRef = _ref.containerRef;
  var mountNode = React.useRef(null);
  var portalNode = React.useRef(null);
  var forceUpdate = useForceUpdate.useForceUpdate();

  useIsomorphicLayoutEffect.useIsomorphicLayoutEffect(function () {
    // This ref may be null when a hot-loader replaces components on the page
    if (!mountNode.current) return; // It's possible that the content of the portal has, itself, been portaled.
    // In that case, it's important to append to the correct document element.

    var ownerDocument = mountNode.current.ownerDocument;
    var body = (containerRef == null ? void 0 : containerRef.current) || ownerDocument.body;
    portalNode.current = ownerDocument == null ? void 0 : ownerDocument.createElement(type);
    body.appendChild(portalNode.current);
    forceUpdate();
    return function () {
      if (portalNode.current && body) {
        body.removeChild(portalNode.current);
      }
    };
  }, [type, forceUpdate, containerRef]);
  return portalNode.current ? /*#__PURE__*/reactDom.createPortal(children, portalNode.current) : /*#__PURE__*/React.createElement("span", {
    ref: mountNode
  });
};

var Portal = function Portal(_ref2) {
  var unstable_skipInitialRender = _ref2.unstable_skipInitialRender,
      props = _objectWithoutPropertiesLoose(_ref2, _excluded);

  var _React$useState = React.useState(false),
      hydrated = _React$useState[0],
      setHydrated = _React$useState[1];

  React.useEffect(function () {
    if (unstable_skipInitialRender) {
      setHydrated(true);
    }
  }, [unstable_skipInitialRender]);

  if (unstable_skipInitialRender && !hydrated) {
    return null;
  }

  return /*#__PURE__*/React.createElement(PortalImpl, props);
};

exports.Portal = Portal;
exports.default = Portal;
